```rust
pub mod err;

pub use err::{ParseErr, ReadErr};
use json::{JsonValue, parse};
use std::{error::Error, fs};

#[derive(Debug, Eq, PartialEq, Clone)]
pub struct Task {
    pub id: u32,
    pub description: String,
    pub level: u32,
}

#[derive(Debug, Eq, PartialEq)]
pub struct TodoList {
    pub title: String,
    pub tasks: Vec<Task>,
}

impl TodoList {
    pub fn get_todo(path: &str) -> Result<TodoList, Box<dyn Error>> {
        // todo!()

        let rf: String = fs::read_to_string(path).map_err(|e| ReadErr {
            child_err: Box::new(e),
        })?;

        let j_val=
            parse(&rf).map_err(|err| ParseErr::Malformed(Box::new(err)))?;

        if rf.trim().is_empty() {
            return Err(Box::new(ParseErr::Empty));
        }
        let title = &j_val["title"];
        let tsk = &j_val["tasks"];
        if tsk.is_empty() {
            return Err(Box::new(ParseErr::Empty));
        }
        let mut final_tsk: Vec<Task> = vec![];
        for t in tsk.members() {
            final_tsk.push(Task {
                id: t["id"].as_u32().unwrap(),
                description: t["description"].as_str().unwrap().to_string(),
                level: t["level"].as_u32().unwrap(),
            })
        }
        Ok(TodoList {
            title: title.to_string(),
            tasks: final_tsk,
        })
    }
}
```
