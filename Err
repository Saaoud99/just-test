```rust
use std::{error::Error, fmt::Display};
#[derive(Debug)]
pub enum ParseErr {
    Empty,
    Malformed(Box<dyn Error>),
}

impl Display for ParseErr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        // match self {
        write!(f, "Failed to parse todo file")
        // ParseErr::Malformed(val) => write!(f, "Failed to parse todo file"),
        // }
    }
}

impl Error for ParseErr {
    // todo!()
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        // Some(&*self.child_err)
        match self {
            ParseErr::Empty => None,
            _ => Some(self),
        }
    }
}
#[derive(Debug)]
pub struct ReadErr {
    // expected public fields
    pub child_err: Box<dyn Error>,
}

impl Display for ReadErr {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "Failed to read todo file")
    }
}

impl Error for ReadErr {
    // todo!()
    fn source(&self) -> Option<&(dyn Error + 'static)> {
        Some(self.child_err.as_ref())
    }
}
```
