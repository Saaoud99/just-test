```rs
#[derive(Debug, Clone, PartialEq)]
pub struct Store {
    pub products: Vec<(String, f32)>,
}

impl Store {
    pub fn new(products: Vec<(String, f32)>) -> Store {
        Store { products }
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct Cart {
    pub items: Vec<(String, f32)>,
    pub receipt: Vec<f32>,
}

impl Cart {
    pub fn new() -> Cart {
        Cart {
            items: Vec::new(),
            receipt: Vec::new(),
        }
    }

    pub fn insert_item(&mut self, s: &Store, ele: String) {
        if let Some((_, price)) = s.products.iter().find(|(name, _)| name == &ele) {
            self.items.push((ele, *price));
        }
    }

    pub fn generate_receipt(&mut self) -> Vec<f32> {
        let mut prices: Vec<f32> = self.items
            .iter()
            .map(|(_, p)| *p)
            .collect();
        prices.sort_by(|a, b| a.partial_cmp(b).unwrap());

        let free_items = prices.len() / 3;
        let discount: f32 = prices.iter().take(free_items).sum();
        let total: f32 = prices.iter().sum();

        let mut _factor = 0.0;
        if total > 0.0 {
            _factor = (total - discount) / total;
        } else {
            _factor = 1.0;
        }

        let mut receipt: Vec<f32> = prices
            .iter()
            .map(|p| (p * _factor * 100.0).round() / 100.0)
            .collect();

        receipt.sort_by(|a, b| a.partial_cmp(b).unwrap());
        self.receipt = receipt.clone();
        receipt
    }
}
```
