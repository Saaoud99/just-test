mod areas_volumes;
pub use areas_volumes::*;

pub fn area_fit(
    (x, y): (usize, usize),
    kind: areas_volumes::GeometricalShapes,
    times: usize,
    (a, b): (usize, usize),
) -> bool {
    
        match kind{
            GeometricalShapes::Square=> rectangle_area(x, y)  >= square_area(a)  * times ,

            GeometricalShapes::Rectangle=>rectangle_area(x, y) >= rectangle_area(a, b) * times,

            GeometricalShapes::Triangle=> rectangle_area(x, y) as f64 >= triangle_area(a, b)  * times as f64,

            GeometricalShapes::Circle=> rectangle_area(x, y) as f64 >= circle_area(a) * times as f64,
        }
}

pub fn volume_fit(
    (x, y, z): (usize, usize, usize),
    kind: areas_volumes::GeometricalVolumes,
    times: usize,
    (a, b, c): (usize, usize, usize),
) -> bool {
    
        match kind{
            GeometricalVolumes::Cube=> parallelepiped_volume(x, y, z)  >= cube_volume(a)  * times ,

            GeometricalVolumes::Cone=>parallelepiped_volume(x, y, z) as f64 >= cone_volume(a, b) * times as f64,

            GeometricalVolumes::Sphere=> parallelepiped_volume(x, y, z) as f64 >= sphere_volume(a)  * times as f64,

            GeometricalVolumes::Parallelepiped=> parallelepiped_volume(x, y, z) >= parallelepiped_volume(a, b , c) * times ,

            GeometricalVolumes::TriangularPyramid=> parallelepiped_volume(x, y, z) as f64 >= triangular_pyramid_volume(a as f64, b) * times as f64,

        }
}

